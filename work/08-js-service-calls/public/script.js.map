{"version":3,"file":"script.js","mappings":"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Q,CAAC;AAC3C,CAAC;;;;;;;UCjFD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6F;AAC/D;;AAE9B;AACA,IAAMP,GAAG,GAAGL,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;;AAE1C;AACAI,GAAG,CAACU,gBAAgB,CAAC,OAAO,EAAE,UAACC,KAAK,EAAK;EACrC,IAAIA,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAE;IAChCF,KAAK,CAACG,cAAc,CAAC,CAAC;IACtB,IAAMnC,QAAQ,GAAGqB,GAAG,CAACJ,aAAa,CAAC,QAAQ,CAAC,CAACmB,KAAK;IAClDrC,uDAAS,CAACC,QAAQ,CAAC,CACdJ,IAAI,CAAC,YAAM;MACR,OAAOW,uDAAS,CAAC,CAAC;IACtB,CAAC,CAAC,CACDX,IAAI,CAAC,UAACiB,IAAI,EAAK;MACZiB,0CAAS,CAAC9B,QAAQ,EAAEa,IAAI,CAAC;IAC7B,CAAC,CAAC,SACI,CAAC,UAAClB,KAAK,EAAK;MACd,IAAIA,KAAK,CAACA,KAAK,KAAK,eAAe,EAAE;QACjCmC,kDAAiB,CAAC,uEAAuE,CAAC;MAC9F,CAAC,MAAM;QACHA,kDAAiB,CAAC,qCAAqC,CAAC;MAC5D;IACJ,CAAC,CAAC;EACV,CAAC,MAAM,IAAIE,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;IACxCd,yDAAW,CAAC,CAAC,CACRxB,IAAI,CAAC,YAAM;MACRkC,0CAAS,CAAC,CAAC;IACf,CAAC,CAAC,SACI,CAAC,UAACnC,KAAK,EAAK;MACd,IAAIA,KAAK,CAACA,KAAK,KAAK,eAAe,EAAE;QACjCmC,iDAAgB,CAAC,uEAAuE,CAAC;MAC7F,CAAC,MAAM;QACHA,iDAAgB,CAAC,oDAAoD,CAAC;MAC1E;IACJ,CAAC,CAAC;EACV,CAAC,MAAM,IAAIE,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;IACxCF,KAAK,CAACG,cAAc,CAAC,CAAC;IACtB,IAAMtB,IAAI,GAAGQ,GAAG,CAACJ,aAAa,CAAC,QAAQ,CAAC,CAACmB,KAAK;IAC9CxB,6DAAe,CAACC,IAAI,CAAC,CACpBjB,IAAI,CAAC,UAAAC,QAAQ,EAAI;MACd,IAAIA,QAAQ,CAACF,KAAK,EAAE;QAChB,MAAME,QAAQ;MAClB,CAAC,MAAM;QACH,IAAQG,SAAQ,GAAiBH,QAAQ,CAAjCG,QAAQ;UAAEU,UAAU,GAAKb,QAAQ,CAAvBa,UAAU;QAC5BoB,iDAAgB,yCAAAX,MAAA,CAAyCnB,SAAQ,qBAAAmB,MAAA,CAAkBT,UAAU,CAAE,CAAC;MACpG;IACJ,CAAC,CAAC,SACQ,CAAC,UAACf,KAAK,EAAK;MACd,IAAIA,KAAK,CAACA,KAAK,KAAK,eAAe,EAAE;QACjCmC,iDAAgB,CAAC,uEAAuE,CAAC;MAC7F,CAAC,MAAM;QACHA,iDAAgB,CAAC,0DAA0D,CAAC;MAChF;IACJ,CAAC,CAAC;IACF;IACA;IACA;EAGR;AACJ,CAAC,CAAC;;AAEF;AACAxC,0DAAY,CAAC,CAAC,CACTM,IAAI,CAAC,UAACyC,OAAO,EAAK;EACf,IAAIA,OAAO,CAACrC,QAAQ,EAAE;IAClB,OAAOO,uDAAS,CAAC,CAAC,CACbX,IAAI,CAAC,UAACiB,IAAI,EAAK;MACZiB,0CAAS,CAACO,OAAO,CAACrC,QAAQ,EAAEa,IAAI,CAAC;IACrC,CAAC,CAAC;EACV,CAAC,MAAM;IACHiB,0CAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACtB;AACJ,CAAC,CAAC,SACI,CAAC,UAACnC,KAAK,EAAK;EACd,IAAIA,KAAK,CAACA,KAAK,KAAK,eAAe,EAAE;IACjCmC,kDAAiB,CAAC,uEAAuE,CAAC;EAC9F,CAAC,MAAM;IACHA,kDAAiB,CAAC,yEAAyE,CAAC;EAChG;AACJ,CAAC,CAAC,C","sources":["webpack://08-js-service-calls/./src/services.js","webpack://08-js-service-calls/./src/ui.js","webpack://08-js-service-calls/webpack/bootstrap","webpack://08-js-service-calls/webpack/runtime/define property getters","webpack://08-js-service-calls/webpack/runtime/hasOwnProperty shorthand","webpack://08-js-service-calls/webpack/runtime/make namespace object","webpack://08-js-service-calls/./src/login.js"],"sourcesContent":["export const fetchSession = () => {\n  return fetch('/api/session')\n      .catch(err => Promise.reject({ error: 'network-error' }))\n      .then(response => {\n          return response.json();\n      });\n};\n\nexport const fetchUser = (username) => {\n  return fetch('/api/session', {\n          method: 'POST',\n          headers: {\n              'content-type': 'application/json',\n          },\n          body: JSON.stringify({ username }),\n      })\n      .catch(err => Promise.reject({ error: 'network-error' }))\n      .then(response => {\n          if (response.ok) {\n              return response.json()\n          } else {\n              return response.json().then(err => Promise.reject(err))\n          }\n      });\n};\n\nexport const fetchWord = () => {\n  return fetch('/api/word')\n      .then(response => {\n          if (!response.ok) {\n              // The server responded with an error status code\n              // Throw an error to be caught in the catch block\n              throw new Error('Server error');\n          }\n          // The server responded with a success status code\n          // Parse the JSON in the response\n          return response.json();\n      })\n      .then(data => {\n        return data.storedWord;  // Return the 'word' property of the data\n    })\n      .catch(err => {\n          if (err.message === 'Server error') {\n              // The server responded with an error status code\n              return Promise.reject({ error: 'server-error' });\n          } else {\n              // There was a network error\n              return Promise.reject({ error: 'network-error' });\n          }\n      });\n};\n\nexport const fetchUpdateWord = (word) => {\n  return fetch('/api/word', {\n          method: 'PUT',\n          headers: {\n              'content-type': 'application/json',\n          },\n          body: JSON.stringify({ word }),\n      })\n      .catch(err => Promise.reject({ error: 'network-error' }))\n      .then( response => {\n        if(!response.ok) { \n          return response.json().then( err => Promise.reject(err) );\n        }\n        return response.json(); \n      })\n      .then(response => {\n        // The word was successfully updated on the server\n        // Now update the UI with the new word\n        updateUIWithNewWord(word);\n        return response;\n      });\n      \n};\nfunction updateUIWithNewWord(word) {\n  const wordElement = document.querySelector('.stored-word');\n  wordElement.textContent =  `Stored Word: ${word}`;\n}\n\nexport const fetchDelete = () => {\n  return fetch('/api/session', {\n          method: 'DELETE',\n          headers: {\n              'content-type': 'application/json',\n          },\n      })\n      .catch(err => Promise.reject({ error: 'network-error' }))\n      .then(response => {\n          if (response.ok) {\n              return response.json()\n          }\n      });\n};\n\n\n","// export const showLoginForm = () => {\n//     loginForm.classList.remove('hidden');\n//     loginError.classList.add('hidden');\n//     wordView.classList.add('hidden');\n// };\n\n// export const showWordView = (username, word) => {\n//     loginForm.classList.add('hidden');\n//     loginError.classList.add('hidden');\n//     wordView.classList.remove('hidden');\n//     usernameDisplay.textContent = username;\n//     wordForm.elements.word.value = word;\n// };\n\n// export const showLoginError = (message) => {\n//     loginError.textContent = message;\n//     loginError.classList.remove('hidden');\n// };\n\n// export const showWordError = (message) => {\n//     wordError.textContent = message;\n//     wordError.classList.remove('hidden');\n// };\nconst app = document.querySelector('#app');\n\nconst generateHtml = (username, storedWord) => {\n\n    // const word = storedWord ? storedWord.word : '';\n    // const word = storedWord && storedWord.word ? storedWord.word : '';\n    if (!username && !storedWord) {\n        return `\n            <div class=\"container\">\n                <div class=\"info\">\n                    <div>Enter a username to login</div>\n                <input\n                    class=\"input\"\n                    type=\"text\"\n                    placeholder=\"username\"\n                    \n                />\n                <button class=\"login\">Login</button>\n            </div>\n            <div class=\"error\"></div>\n        `\n    } else {\n        return `\n            <div class=\"container\">\n                <div class=\"info\">\n                    <div>User: ${username}</div>\n                    <div class=\"stored-word\">Stored Word: ${storedWord || ''}</div>\n                </div>\n            \n                <input\n                    class=\"input\"\n                    type=\"text\"\n                    placeholder=\"Update your word\"\n                    \n                />\n                <div class=\"button-container\">\n                <button class=\"update\">update</button>\n                <button class=\"delete\">Log out</button>\n                </div>\n            </div>\n            <div class=\"error\"></div>\n        `\n    }\n}\n\nexport const render = (username, storedWord) => {\n    app.innerHTML = generateHtml(username, storedWord);\n}\n\nexport const showLoginError = (message) => {\n    const errorElement = document.querySelector('.error');\n    errorElement.textContent = message;\n    errorElement.classList.remove('hidden');\n};\nexport const showWordError = (message) => {\n    const errorElement = document.querySelector('.error');\n    errorElement.textContent = message;\n    errorElement.classList.remove('hidden');\n};\n\nexport { generateHtml };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import {fetchSession, fetchUser,fetchWord, fetchUpdateWord,fetchDelete} from './services.js';\n// import * as ui from './ui.js';\n\n// // Define variables to store DOM elements\n// const loginForm = document.querySelector('#login-form');\n// const loginError = document.querySelector('#login-error');\n// const wordView = document.querySelector('#word-view');\n// const wordForm = document.querySelector('#word-form');\n// const wordError = document.querySelector('#word-error');\n// const usernameDisplay = document.querySelector('#username-display');\n// const logoutButton = document.querySelector('#logout-button');\n\n// // Define event listeners\n// loginForm.addEventListener('submit', (event) => {\n//     event.preventDefault();\n//     const username = event.target.elements.username.value;\n//     fetchUser(username)\n//         .then(() => {\n//             return fetchWord();\n//         })\n//         .then((word) => {\n//             ui.render(username, word);\n//         })\n//         .catch((error) => {\n//             if (error.error === 'network-error') {\n//                 ui.showLoginError('There was a problem connecting to the server. Please try again later.');\n//             } else {\n//                 ui.showLoginError('Invalid username. Please try again.');\n//             }\n//         });\n// });\n\n// logoutButton.addEventListener('click', () => {\n//     fetchDelete()\n//         .then(() => {\n//             ui.render();\n//         })\n//         .catch((error) => {\n//             if (error.error === 'network-error') {\n//                 ui.showWordError('There was a problem connecting to the server. Please try again later.');\n//             } else {\n//                 ui.showWordError('There was a problem logging out. Please try again.');\n//             }\n//         });\n// });\n\n// wordForm.addEventListener('submit', (event) => {\n//     event.preventDefault();\n//     const word = event.target.elements.word.value;\n//     fetchUpdateWord(word)\n//         .then(() => {\n//             ui.showWordError('Word updated successfully.');\n//         })\n//         .catch((error) => {\n//             if (error.error === 'network-error') {\n//                 ui.showWordError('There was a problem connecting to the server. Please try again later.');\n//             } else {\n//                 ui.showWordError('There was a problem updating the word. Please try again.');\n//             }\n//         });\n// });\n\n// // Define initial page load logic\n// fetchSession()\n//     .then((session) => {\n//         if (session.username) {\n//             return fetchWord()\n//                 .then((word) => {\n//                     ui.render(session.username, word);\n//                 });\n//         } else {\n//             ui.render('', '');// Show the initial UI with empty username and storedWord\n//         }\n//     })\n//     .catch((error) => {\n//         if (error.error === 'network-error') {\n//             ui.showLoginError('There was a problem connecting to the server. Please try again later.');\n//         } else {\n//             ui.showLoginError('There was a problem checking for an existing session. Please try again.');\n//         }\n//     });\nimport {fetchSession, fetchUser,fetchWord, fetchUpdateWord,fetchDelete} from './services.js';\nimport * as ui from './ui.js';\n\n// Define variables to store DOM elements\nconst app = document.querySelector('#app');\n\n// Define event listeners\napp.addEventListener('click', (event) => {\n    if (event.target.matches('.login')) {\n        event.preventDefault();\n        const username = app.querySelector('.input').value;\n        fetchUser(username)\n            .then(() => {\n                return fetchWord();\n            })\n            .then((word) => {\n                ui.render(username, word);\n            })\n            .catch((error) => {\n                if (error.error === 'network-error') {\n                    ui.showLoginError('There was a problem connecting to the server. Please try again later.');\n                } else {\n                    ui.showLoginError('Invalid username. Please try again.');\n                }\n            });\n    } else if (event.target.matches('.delete')) {\n        fetchDelete()\n            .then(() => {\n                ui.render();\n            })\n            .catch((error) => {\n                if (error.error === 'network-error') {\n                    ui.showWordError('There was a problem connecting to the server. Please try again later.');\n                } else {\n                    ui.showWordError('There was a problem logging out. Please try again.');\n                }\n            });\n    } else if (event.target.matches('.update')) {\n        event.preventDefault();\n        const word = app.querySelector('.input').value;\n        fetchUpdateWord(word)\n        .then(response => {\n            if (response.error) {\n                throw response;\n            } else {\n                const { username, storedWord } = response;\n                ui.showWordError(`Word updated successfully. Username: ${username}, Stored Word: ${storedWord}`);\n            }\n        })\n            .catch((error) => {\n                if (error.error === 'network-error') {\n                    ui.showWordError('There was a problem connecting to the server. Please try again later.');\n                } else {\n                    ui.showWordError('There was a problem updating the word. Please try again.');\n                }\n            })\n            // .then(() => {\n            //     ui.showWordError(`Word updated successfully. Username: ${username}, Stored Word: ${storedWord}`);\n            // });\n           \n            \n    }\n});\n\n// Define initial page load logic\nfetchSession()\n    .then((session) => {\n        if (session.username) {\n            return fetchWord()\n                .then((word) => {\n                    ui.render(session.username, word);\n                });\n        } else {\n            ui.render('', '');// Show the initial UI with empty username and storedWord\n        }\n    })\n    .catch((error) => {\n        if (error.error === 'network-error') {\n            ui.showLoginError('There was a problem connecting to the server. Please try again later.');\n        } else {\n            ui.showLoginError('There was a problem checking for an existing session. Please try again.');\n        }\n    });"],"names":["fetchSession","fetch","err","Promise","reject","error","then","response","json","fetchUser","username","method","headers","body","JSON","stringify","ok","fetchWord","Error","data","storedWord","message","fetchUpdateWord","word","updateUIWithNewWord","wordElement","document","querySelector","textContent","concat","fetchDelete","app","generateHtml","render","innerHTML","showLoginError","errorElement","classList","remove","showWordError","ui","addEventListener","event","target","matches","preventDefault","value","session"],"sourceRoot":""}